enum Duration {
    ONE_MONTH
    ONE_YEAR
}

// create a per supporter with membership model - only create supporter
model Membership_owner {
    id                          String                        @id @default(uuid())
    ownerId                     String                        @unique
    owner                       User                          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    createdAt                   DateTime                      @default(now())
    updatedAt                   DateTime                      @updatedAt
    Membership_levels           Membership_levels[]
    MembershipAccessToVideoCall MembershipAccessToVideoCall[] @relation("MembershipAccessToVideoCall")
    MembershipAccessToMessages  MembershipAccessToMessages[]  @relation("AccessToMessages")
    MembershipAccessToGallery   MembershipAccessToGallery[]   @relation("AccessToGallery")
    MembershipAccessToPosts     MembershipAccessToPosts[]     @relation("AccessToPosts")
}

//create a membership model with plans levels cart with supporter - only create supporter
model Membership_levels {
    id               String           @id @default(uuid())
    membershipId     String
    membership       Membership_owner @relation(fields: [membershipId], references: [id], onDelete: Cascade)
    levelName        String
    levelDescription String?
    levelImage       String

    MembershipSubscriptionPlan MembershipSubscriptionPlan[]
    createdAt                  DateTime                     @default(now())
    updatedAt                  DateTime                     @updatedAt
}

// 2 type subscription plans with duration and price connect to membership and membership_levels - create only supporter
model MembershipSubscriptionPlan {
    id                String            @id @default(uuid())
    membershipLevelId String
    membershipLevel   Membership_levels @relation(fields: [membershipLevelId], references: [id], onDelete: Cascade)

    duration Duration // ONE_MONTH or ONE_YEAR
    price    Float // e.g., 5 or 50

    // Access controls:
    membershipAccessToVideoCallId String?
    callLimitAccess               MembershipAccessToVideoCall? @relation(fields: [membershipAccessToVideoCallId], references: [id])
    membershipAccessGalleryId     String?
    galleryAccess                 MembershipAccessToGallery?   @relation(fields: [membershipAccessGalleryId], references: [id])
    membershipAccessToPostsId     String?
    MembershipAccessToPosts       MembershipAccessToPosts?     @relation(fields: [membershipAccessToPostsId], references: [id])
    membershipAccessToMessagesId  String?
    MembershipAccessToMessages    MembershipAccessToMessages?  @relation(fields: [membershipAccessToMessagesId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([membershipLevelId, duration]) // one plan per level+duration
}

// access models video call / gallery / post / message
// this schema models the access controls for each membership level - create only supporter
model MembershipAccessToVideoCall {
    id                         String                       @id @default(uuid())
    membership_ownerId         String
    Membership_owner           Membership_owner             @relation("MembershipAccessToVideoCall", fields: [membership_ownerId], references: [id])
    duration                   Duration
    title                      String                       @default("Video Call Access")
    description                String?                      @default("Access to video calls with the owner")
    totalVideoCalls            Int                          @default(0) // total number of video calls allowed
    unlimitedVideoCalls        Boolean                      @default(false) // if true, totalVideoCalls is ignored
    MembershipSubscriptionPlan MembershipSubscriptionPlan[]
}

model MembershipAccessToMessages {
    id                         String                       @id @default(uuid())
    membership_ownerId         String
    Membership_owner           Membership_owner             @relation("AccessToMessages", fields: [membership_ownerId], references: [id])
    duration                   Duration
    title                      String                       @default("Messages Access")
    description                String?                      @default("Access to messages with the owner")
    totalMessages              Int                          @default(0) // total number of messages allowed
    unlimitedMessages          Boolean                      @default(false) // if true, totalMessages is ignored
    MembershipSubscriptionPlan MembershipSubscriptionPlan[]
}

model MembershipAccessToGallery {
    id                         String                       @id @default(uuid())
    membership_ownerId         String
    Membership_owner           Membership_owner             @relation("AccessToGallery", fields: [membership_ownerId], references: [id])
    duration                   Duration
    title                      String                       @default("Gallery Access")
    description                String                       @default("Access to the gallery with the owner")
    AccessToGallery            Boolean                      @default(true) // if true, access to gallery is granted
    MembershipSubscriptionPlan MembershipSubscriptionPlan[]
}

model MembershipAccessToPosts {
    id                         String                       @id @default(uuid())
    membership_ownerId         String
    Membership_owner           Membership_owner             @relation("AccessToPosts", fields: [membership_ownerId], references: [id])
    duration                   Duration
    title                      String                       @default("Posts Access")
    description                String                       @default("Access to the posts with the owner")
    AccessToPosts              Boolean                      @default(true) // if true, access to posts is granted
    MembershipSubscriptionPlan MembershipSubscriptionPlan[]
}
