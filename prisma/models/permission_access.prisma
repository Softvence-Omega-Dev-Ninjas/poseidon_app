model PermissionVideoCallAccess {
  id                  String          @id @unique @default(uuid())
  user_id             String?
  supporter_id        String
  totalVideoCalls     Int
  unlimitedVideoCalls Boolean
  createAt            DateTime        @default(now())
  paymentId           String          @unique
  paymentDetails      paymentDetails  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  supporter           User            @relation("PermissionVideoCallAccessSupporter", fields: [supporter_id], references: [id])
  user                User?            @relation("PermissionVideoCallAccessUser", fields: [user_id], references: [id])
  scheduling_url      String?
  url                 String?
  scheduledEvent      ScheduledEvent? @relation(name: "membershipScheduledEvent")
}

model PermissionMessagesAccess {
  id                String         @id @unique @default(uuid())
  user_id           String?
  supporter_id      String
  totalMessages     Int
  unlimitedMessages Boolean
  createAt          DateTime       @default(now())
  paymentId         String         @unique
  paymentDetails    paymentDetails @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  supporter         User           @relation("PermissionMessagesAccessSupporter", fields: [supporter_id], references: [id])
  user              User?           @relation("PermissionMessagesAccessUser", fields: [user_id], references: [id])
}

model PermissionGalleryAccess {
  id             String         @id @unique @default(uuid())
  user_id        String?
  supporter_id   String
  createAt       DateTime       @default(now())
  paymentId      String         @unique
  paymentDetails paymentDetails @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  supporter      User           @relation("PermissionGalleryAccessSupporter", fields: [supporter_id], references: [id])
  user           User?           @relation("PermissionGalleryAccessUser", fields: [user_id], references: [id])
}

model PermissionPostsAccess {
  id             String         @id @unique @default(uuid())
  user_id        String?
  supporter_id   String
  createAt       DateTime       @default(now())
  paymentId      String         @unique
  paymentDetails paymentDetails @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  supporter      User           @relation("PermissionPostsAccessSupporter", fields: [supporter_id], references: [id])
  user           User?           @relation("PermissionPostsAccessUser", fields: [user_id], references: [id])
}
