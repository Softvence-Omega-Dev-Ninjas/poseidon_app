model User {
  id                                 String                      @id @unique @default(uuid())
  provider                           String                      @default("credentials")
  email                              String
  password                           String?
  otp                                String?
  varify                             Boolean                     @default(false)
  deactivate                         Boolean                     @default(false)
  role                               Roles                       @default(user)
  stripeAccountId                    String?
  username                           String                      @unique
  createdAt                          DateTime                    @default(now())
  comments                           Comment[]
  conversations1                     Conversation[]              @relation("User1Conversations")
  conversations2                     Conversation[]              @relation("User2Conversations")
  images                             Image[]
  imagescomments                     ImageComment[]
  imageslikes                        ImageLike[]
  likes                              Like[]
  memberships_owner                  Membership_owner?
  receivedMessages                   Message[]                   @relation("ReceivedMessages")
  sentMessages                       Message[]                   @relation("SentMessages")
  orders                             Order[]
  PermissionGalleryAccessSupporter   PermissionGalleryAccess[]   @relation("PermissionGalleryAccessSupporter")
  PermissionGalleryAccessUser        PermissionGalleryAccess[]   @relation("PermissionGalleryAccessUser")
  PermissionMessagesAccessSupporter  PermissionMessagesAccess[]  @relation("PermissionMessagesAccessSupporter")
  PermissionMessagesAccessUser       PermissionMessagesAccess[]  @relation("PermissionMessagesAccessUser")
  PermissionPostsAccessSupporter     PermissionPostsAccess[]     @relation("PermissionPostsAccessSupporter")
  PermissionPostsAccessUser          PermissionPostsAccess[]     @relation("PermissionPostsAccessUser")
  PermissionvideoCallAccessSupporter PermissionVideoCallAccess[] @relation("PermissionVideoCallAccessSupporter")
  PermissionvideoCallAccessUser      PermissionVideoCallAccess[] @relation("PermissionVideoCallAccessUser")
  posts                              Post[]
  productCategories                  ProductCategory[]
  profile                            Profile?
  invited                            Referral[]                  @relation("UserInvited")
  inviter                            Referral[]                  @relation("UserInviter")
  services                           Service[]
  serviceOrders                      ServiceOrder[]              @relation("UserServiceOrders")
  shop                               Shop?
  support_cart_layout                SupportCartLayout?
  author_supportor                   SupporterPay[]              @relation("author_supportor")
  supporter                          SupporterPay[]
  zoomAccounts                       ZoomAccount?
}

model Profile {
  id                  String  @id @unique @default(uuid())
  userid              String  @unique
  name                String
  image               String
  address             String?
  state               String?
  city                String?
  country             String?
  postcode            String?
  cover_image         String?
  description         String?
  cover_image_offsetY String? @default("0")
  user                User    @relation(fields: [userid], references: [id], onDelete: Cascade)
}

model Referral {
  id         String   @id @default(uuid())
  inviterId  String
  invitedId  String
  createdAt  DateTime @default(now())
  discount   Int      @default(5)
  completed  Boolean  @default(false)
  invited    User     @relation("UserInvited", fields: [invitedId], references: [id])
  inviter    User     @relation("UserInviter", fields: [inviterId], references: [id])
}

enum Roles {
  admin
  supporter
  user
}
