model SupporterPay {
  id                String             @id @unique @default(uuid())
  user_id           String?
  author_id         String
  total_price       Float
  name              String
  email             String
  country           String
  massage           String
  createAt          DateTime           @default(now())
  updateAt          DateTime           @updatedAt
  paymemtStatus     PaymemtStatus      @default(pending)
  pi_number         String?
  author            User               @relation("author_supportor", fields: [author_id], references: [id])
  user              User?              @relation(fields: [user_id], references: [id])
  oder_package_name oder_package_name? @relation("SupporterPayTooder_package_name")
  scheduling_url    String?
  uri               String?
  scheduledEvent    ScheduledEvent?    @relation(name: "supporterPayScheduledEvent")
}

model oder_package_name {
  id               String       @id @default(uuid())
  supporter_pay_id String       @unique
  package_name     String       @db.VarChar(100)
  package_time     Float
  package_price    Float
  complate         Boolean      @default(false)
  createAt         DateTime     @default(now())
  updateAt         DateTime     @updatedAt
  SupporterPay     SupporterPay @relation("SupporterPayTooder_package_name", fields: [supporter_pay_id], references: [id], onDelete: Cascade)
}

model SupportCartLayout {
  id                       String                      @unique @default(uuid())
  author_id                String                      @unique
  choose_layout            LayoutType                  @default(standard)
  default_price            SupportCart_default_price[]
  cheers_live_package_type Cheers_live_package_type[]
  author                   User                        @relation(fields: [author_id], references: [id], onDelete: Cascade)
  SuggestQuantity          SupportCartLayoutQuantity[]
}

model Cheers_live_package_type {
  id                     String            @unique @default(uuid())
  package_name           String            @db.VarChar(100)
  package_time           Float
  package_price          Float
  support_cart_layout_id String
  support_cart_layout    SupportCartLayout @relation(fields: [support_cart_layout_id], references: [id], onDelete: Cascade)
  scheduling_url         String?
  uri                    String?
}

model SupportCartLayoutQuantity {
  id                  String            @id @unique @default(uuid())
  supportCartLayoutId String
  choose_layout       LayoutType        @default(suggest)
  quantity            Int
  SupportCartLayout   SupportCartLayout @relation(fields: [supportCartLayoutId], references: [id])
}

enum LayoutType {
  standard
  suggest
}

model SupportCart_default_price {
  id                     String            @id @unique @default(uuid())
  support_cart_layout_id String
  support_cart_layout    SupportCartLayout @relation(fields: [support_cart_layout_id], references: [id], onDelete: Cascade)
  name                   String            @default("one short drink")
  price                  Int               @default(5)
}
