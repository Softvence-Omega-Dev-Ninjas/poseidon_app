model SupporterPay {
  id                  String            @id @unique @default(uuid())
  user_id             String
  author_id           String
  transaction_id      String
  total_price         Float
  name                String
  country             String
  massage             String
  createAt            DateTime          @default(now())
  updateAt            DateTime          @updatedAt
  author              User              @relation("author_supportor", fields: [author_id], references: [id])
  user                User              @relation(fields: [user_id], references: [id])
  oder_package_name   oder_package_name @relation(fields: [oder_package_nameId], references: [id])
  oder_package_nameId String            @unique
}

model oder_package_name {
  id               String        @id @default(uuid())
  supporter_pay_id String
  package_name     String        @db.VarChar(100)
  package_time     Float
  package_price    Float
  complate         Boolean       @default(false)
  createAt         DateTime      @default(now())
  updateAt         DateTime      @updatedAt
  SupporterPay     SupporterPay?
}

// root cart details
model SupportCartLayout {
  id                       String                      @unique @default(uuid())
  author_id                String                      @unique
  choose_layout            LayoutType                  @default(standard)
  default_price            Int                         @default(5)
  SuggestQuantity          SupportCartLayoutQuantity[]
  cheers_live_package_type Cheers_live_package_type[]
  author                   User                        @relation(fields: [author_id], references: [id], onDelete: Cascade)
}

model Cheers_live_package_type {
  id                     String            @unique @default(uuid())
  package_name           String            @db.VarChar(100)
  package_time           Float
  package_price          Float
  support_cart_layout_id String
  support_cart_layout    SupportCartLayout @relation(fields: [support_cart_layout_id], references: [id], onDelete: Cascade)
}

enum LayoutType {
  standard
  suggest
}

model SupportCartLayoutQuantity {
  id                  String             @id @unique @default(uuid())
  SupportCartLayout   SupportCartLayout? @relation(fields: [supportCartLayoutId], references: [id])
  supportCartLayoutId String?
  choose_layout       LayoutType         @default(suggest)
}
